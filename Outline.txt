# Nodo Manager Web Application

--------------------------------------
Procedure / TODOs
--------------------------------------
+ setup basic node/express
+ setup MongoDB/Mongoose and schemas
  + Implement orders schema
    + add in: orderName, orderCategory, orderDescription, onMenu
    + add order time to orderInfo
    + Update order schema to use mongoose timestamps
  + CRUD operations for items/users API backend
    + express async error handling -> via middleware
+ CRUD ops for frontend
  +items
    +itemService comms working
    +create a form to add new item
    +create a form/way to update items
  +orders
    +orderService comms working
  +users
    +userService comms working
    +create user form
+ Frontend Routing w/ react-router-dom
- Frontend uses/design
  + item CardDeck layout -> autowrap?
  + implement 'Shopping Cart' / current order
  + implement add to order -> modal item modification
  + complete cart reducer with update/delete functionality
  + reflect in front end on my-order page
  + include redirect navigation for item edits in myOrder
  + calculate totals
  + abstract order page components
  + footer sitemap links
  + unify page layouts/padding
  + component abstractions
  + Login / Registration forms working
  + logout now redirects to menu
  + login success now redirects
  + login button shows modal window for login form
  + create order confirmation page and redirect to it
  + MyOrder baseprice/item total layout
  + stylize new/update item form
    + availability as radio selection
    + form validation

  + create currentUserReducer to manage in redux
  + refactor userAuth and signup
  + page restrictions for user roles
    + update user roles to be: guest, user, employee, manager, admin
    + functionality works
    + choose and implement restrictions
      + have roles encompass subsequent roles i.e admin is also a manager by default

  - make itemInfo/card responsive
    - text wrapping, overflow, min/max sizes

  - Refactor menuCategoryAccordion component into separate components

  + Add MyAccount Page
    - view previous orders

  - Users Page functionality
    + new user button follows registration on backend
    + implement restrictions on new user roles setting
    - default password -> auto-generate?
    + UpdateUserForm created
      - check update auth scope
    - group users by role


- CUSTOM FORMS & VALIDATION (Frontent)
  - min/max length of form inputs all around
  + refactor 'remaining characters code' to reusable component
  - refactor form validation to resuable components?
  - strip leading/trailing whitespace from inputs ( .trim() method )
  - utilize charactersRemaining in all forms if applicable
  + Item forms
    + NewItemForm
    + UpdateItemForm
    - Stylize forms
  - Order forms
    + MyOrderForm
    - AddOrderForm -> once built
    - UpdateOrderForm (modal)-> once built
      - disable edit btn if marked completed
    - validate status choices
  - User forms
    + NewUserForm
    + UpdateUserForm

- ERROR HANDLING
  + duplicate username/emails upon registration now throw an error and message
  + make alert component
  + Api based errors caught at service boundary, contextualized, and rethrown to
    be caught in components and dispatched to alertReducer
  + Implemented item form validations
  - conditional render alertBanner on site vs in mobile
  - connect error to form component if applicable
  - verify shape of error objects created at frontend service layer
  - verify data initializers on frontend (currently in useEffect)
  - manage cast errors on backend
  - hide jwt malformed to user

+ API TESTING w/ JEST & SUPERTEST
  + Basic Data Validation testing for item, order, user APIs
    + Required Properties / Default values
    - Expand data type validation
  + Basic Auth Validation testing for item, order, user APIs
  - improve/expand order & item schema/data validations

- FRONTEND TESTING
  - Setup test env.
  - test modal closebuttons properly reset data (somewhere)

- Cross ref orders and users
- confirm account registration w/ email?
- implement OAuth for registration/login
- login/register page separated from landing page
- guest checkout renders/warnings
- update this list
- Testing backend
- Testing frontend
- implement linter/rules
- implement db registration for many users/accounts
