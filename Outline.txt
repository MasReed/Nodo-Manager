# Nodo Manager Web Application

--------------------------------------
Procedure / TODOs
--------------------------------------
+ setup basic node/express
+ setup MongoDB/Mongoose and schemas
  + Implement orders schema
    + add in: orderName, orderCategory, orderDescription, onMenu
    + add order time to orderInfo
    + Update order schema to use mongoose timestamps
  + CRUD operations for items/users API backend
    + express async error handling -> via middleware
+ CRUD ops for frontend
  +items
    +itemService comms working
    +create a form to add new item
    +create a form/way to update items
  +orders
    +orderService comms working
  +users
    +userService comms working
    +create user form
+ Frontend Routing w/ react-router-dom
- Frontend uses/design
  + item CardDeck layout -> autowrap?
  + implement 'Shopping Cart' / current order
  + implement add to order -> modal item modification
  + complete cart reducer with update/delete functionality
  + reflect in front end on my-order page
  + include redirect navigation for item edits in myOrder
  + calculate totals
  + abstract order page components
  + footer sitemap links
  + unify page layouts/padding
  + component abstractions
  + Login / Registration forms working
  + logout now redirects to menu
  + login success now redirects
  + login button shows modal window for login form
  + create order confirmation page and redirect to it
  + MyOrder baseprice/item total layout
  + stylize new/update item form
    + availability as radio selection
    + form validation
  + create currentUserReducer to manage in redux
  + refactor userAuth and signup
  + page restrictions for user roles
    + update user roles to be: guest, user, employee, manager, admin
    + functionality works
    + choose and implement restrictions
      + have roles encompass subsequent roles i.e admin is also a manager by default
  + apply order sorts on order status changes in orderList
  + users sorted by role
  + Refactor menuCategoryAccordion component into separate components
    + AccordionToggle separated
    + item sorts same as menu categories?
    + standardize itemsList & MenuItemCard
  + make itemInfo/card responsive
    + text wrapping, overflow, min/max sizes
  + Refactor UpdateCustomItemModal & CustomizeItemModal into one component?
  + Add MyAccount Page
    + view previous orders
  + Users Page functionality
    + new user button follows registration on backend
    + implement restrictions on new user roles setting
    + UpdateUserForm created
    + sorted users by role

  - breakdown OrdersList/OrderInfo into reusable components
  - Configure site Route for individual order IDs

  - conditional render alertBanner on site vs in modal
    + functionality exists
    + apply to all modals
    - abstract into hook?

  - Refactor ItemCustomizationModal to use either ModList or CheckedMods

- MOBILE RESPONSIVENESS
  + login modal
  - collapse nav-bar on
    - lose focus
    + item clicked
  - update truncateString to return truncated + option to expand?

- CUSTOM FORMS & VALIDATION (Frontend)
  + refactor 'remaining characters code' to reusable component
  + refactor form validation to reusable hook
  + resetForm function resets to initial state passed to useForm
  + min/max length of form inputs all around
  + strip leading/trailing whitespace from inputs ( now .trimStart() method )
  + utilize charactersRemaining in all forms if applicable
  + Item forms
    + NewItemForm
    + UpdateItemForm

  + Order forms
    + MyOrderForm
    + AddOrderForm
      + conditional redirect to menu or shows current order
    + UpdateOrderForm (modal)-> once built
      + disable edit btn if marked completed
    + Refactor MyOrder components into reusable Order-based components
    + edit item within order, remove item + cancel edit functionality
    + Update costs on editing updates

  - User forms
    + NewUserForm
    + UpdateUserForm
    - update user to existing username errors
    - check auth scope

- ERROR HANDLING
  + duplicate username/emails upon registration now throw an error and message
  + make alert component
  + Api based errors caught at service boundary, contextualized, and rethrown to
    be caught in components and dispatched to alertReducer
  - verify shape of error objects created at frontend service layer
  - verify data initializers on frontend (currently in useEffect)
  - manage cast errors on backend
  **-jwt malformed to user -> happens during checkout as guest

+ API TESTING w/ JEST & SUPERTEST
  + Basic Data Validation testing for item, order, user APIs
    + Required Properties / Default values
    - Implement custom data-type validation, rather than mongoose built-in validation
  + Basic Auth Validation testing for item, order, user APIs

- FRONTEND TESTING
  + Setup test env.
   + react-testing-library
  - test modal closebuttons properly reset data (somewhere)

- CYPRESS TESTING
  + LoginForm tests
  + RegisterForm tests
    - reset user in db between each test

- HEROKU DEPLOYMENT
  + error on order submit, but order goes through?
  + Update readme with url
  + Include debug mode as env config
  - Ingredients list trailing comma
  - update user form username on users page
  - orderpage name should update order name if changed from default

- OTHER
  - implement 'undo action' functionality as reusable hook
  - archive orders
  - login/register page separated from landing page
  - guest checkout renders/warnings
  - end of day features
  - sales data features
  +? Cross ref orders and users
  - confirm account registration w/ email?
    - (automate) default password creation
  - implement OAuth for registration/login
  + implement linter/rules
  - implement db registration for many users/accounts
- update this list
