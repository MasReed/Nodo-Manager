# Nodo Manager Web Application

--------------------------------------
Procedure / TODOs
--------------------------------------
+ setup basic node/express
+ setup MongoDB/Mongoose and schemas
  + Implement orders schema
    + add in: orderName, orderCategory, orderDescription, onMenu
  + CRUD operations for items/users API backend
    + express async error handling -> via middleware
+ CRUD ops for frontend
  +items
    +itemService comms working
    +create a form to add new item
    +create a form/way to update items
  +orders
    +orderService comms working
  +users
    +userService comms working
    +create user form
+ Frontend Routing w/ react-router-dom
- Frontend uses/design
  + item CardDeck layout -> autowrap?
  + implement 'Shopping Cart' / current order
  + implement add to order -> modal item modification
  + complete cart reducer with update/delete functionality
  + reflect in front end on my-order page
  + include redirect navigation for item edits in myOrder
  + calculate totals
  + abstract order page components
  + footer sitemap links
  + unify page layouts/padding
  + component abstractions
  + Login / Registration forms working
  + logout now redirects to menu
  + login success now redirects
  + login button shows modal window for login form
  + create order confirmation page and redirect to it
  + MyOrder baseprice/item total layout
  + Add MyAccount Page
    - view previous orders

  - update orders page / editing ability
  - stylize new/update item form
    + availability as radio selection
  - decouple items and menu?

  - make itemInfo/card responsive
    - text wrapping, overflow, min/max sizes
  - Make users page functional
    + new user button follows registration on backend
    - implement restrictions on new user roles setting
    - default password -> auto-generate?

+ create currentUserReducer to manage in redux
+ refactor userAuth and signup
* page restrictions for user roles
  + update user roles to be: guest, user, employee, manager, admin
  + functionality works
  + choose and implement restrictions
    + have roles encompass subsequent roles i.e admin is also a manager by default

- error handling
  + duplicate username/emails upon registration now throw an error and message
  - connect error to form component if applicable
  + make alert component
  - validation error for no email/username thru newUserForm
  - conditional render alertBanner on site vs in mobile

+ verify order totals serverside


- supertest/jest for backend api

- confirm account registration w/ email?
- implement OAuth for registration/login
- login/register page separated from landing page
- guest checkout renders/warnings
- update this list
- Testing backend
- Testing frontend
- implement linter/rules
- implement db registration for many users/accounts
